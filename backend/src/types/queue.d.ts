/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Queue is a queue of PodGroup. */
        Queue: {
            /** @description APIVersion defines the versioned schema of this representation of an object.
             *     Servers should convert recognized schemas to the latest internal value, and
             *     may reject unrecognized values.
             *     More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources */
            apiVersion?: string;
            /** @description Kind is a string value representing the REST resource this object represents.
             *     Servers may infer this from the endpoint the client submits requests to.
             *     Cannot be updated.
             *     In CamelCase.
             *     More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds */
            kind?: string;
            metadata?: Record<string, never>;
            /** @description Specification of the desired behavior of the queue.
             *     More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status */
            spec?: {
                /** @description If specified, the pod owned by the queue will be scheduled with constraint */
                affinity?: {
                    /** @description Describes nodegroup affinity scheduling rules for the queue(e.g. putting pods of the queue in the nodes of the nodegroup) */
                    nodeGroupAffinity?: {
                        preferredDuringSchedulingIgnoredDuringExecution?: string[];
                        requiredDuringSchedulingIgnoredDuringExecution?: string[];
                    };
                    /** @description Describes nodegroup anti-affinity scheduling rules for the queue(e.g. avoid putting pods of the queue in the nodes of the nodegroup). */
                    nodeGroupAntiAffinity?: {
                        preferredDuringSchedulingIgnoredDuringExecution?: string[];
                        requiredDuringSchedulingIgnoredDuringExecution?: string[];
                    };
                };
                /** @description ResourceList is a set of (resource name, quantity) pairs. */
                capability?: {
                    [key: string]: number | string;
                };
                /** @description The amount of resources configured by the user. This part of resource can be shared with other queues and reclaimed back. */
                deserved?: {
                    [key: string]: number | string;
                };
                /** @description extendCluster indicate the jobs in this Queue will be dispatched to these clusters. */
                extendClusters?: {
                    /** @description ResourceList is a set of (resource name, quantity) pairs. */
                    capacity?: {
                        [key: string]: number | string;
                    };
                    name?: string;
                    /** Format: int32 */
                    weight?: number;
                }[];
                /** @description Guarantee indicate configuration about resource reservation */
                guarantee?: {
                    /** @description The amount of cluster resource reserved for queue. Just set either `percentage` or `resource` */
                    resource?: {
                        [key: string]: number | string;
                    };
                };
                /** @description Parent define the parent of queue */
                parent?: string;
                /**
                 * Format: int32
                 * @description Priority define the priority of queue. Higher values are prioritized for scheduling and considered later during reclamation.
                 */
                priority?: number;
                /** @description Reclaimable indicate whether the queue can be reclaimed by other queue */
                reclaimable?: boolean;
                /** @description Type define the type of queue */
                type?: string;
                /** Format: int32 */
                weight?: number;
            };
            /** @description The status of queue. */
            status?: {
                /** @description Allocated is allocated resources in queue */
                allocated: {
                    [key: string]: number | string;
                };
                /**
                 * Format: int32
                 * @description The number of `Completed` PodGroup in this queue.
                 */
                completed?: number;
                /**
                 * Format: int32
                 * @description The number of `Inqueue` PodGroup in this queue.
                 */
                inqueue?: number;
                /**
                 * Format: int32
                 * @description The number of 'Pending' PodGroup in this queue.
                 */
                pending?: number;
                /** @description Reservation is the profile of resource reservation for queue */
                reservation?: {
                    /** @description Nodes are Locked nodes for queue */
                    nodes?: string[];
                    /** @description Resource is a list of total idle resource in locked nodes. */
                    resource?: {
                        [key: string]: number | string;
                    };
                };
                /**
                 * Format: int32
                 * @description The number of 'Running' PodGroup in this queue.
                 */
                running?: number;
                /** @description State is state of queue */
                state?: string;
                /**
                 * Format: int32
                 * @description The number of 'Unknown' PodGroup in this queue.
                 */
                unknown?: number;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
