/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = Record<string, never>;
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Job: {
            apiVersion?: string;
            kind?: string;
            metadata?: Record<string, never>;
            spec?: {
                /**
                 * Format: int32
                 * @default 3
                 */
                maxRetry: number;
                /** Format: int32 */
                minAvailable?: number;
                /** Format: int32 */
                minSuccess?: number;
                plugins?: {
                    [key: string]: string[];
                };
                policies?: {
                    action?: string;
                    /** @enum {string} */
                    event?:
                        | "*"
                        | "PodPending"
                        | "PodRunning"
                        | "PodFailed"
                        | "PodEvicted"
                        | "Unknown"
                        | "TaskCompleted"
                        | "OutOfSync"
                        | "CommandIssued"
                        | "JobUpdated"
                        | "TaskFailed";
                    events?: (
                        | "*"
                        | "PodPending"
                        | "PodRunning"
                        | "PodFailed"
                        | "PodEvicted"
                        | "Unknown"
                        | "TaskCompleted"
                        | "OutOfSync"
                        | "CommandIssued"
                        | "JobUpdated"
                        | "TaskFailed"
                    )[];
                    /** Format: int32 */
                    exitCode?: number;
                    timeout?: string;
                }[];
                priorityClassName?: string;
                queue?: string;
                runningEstimate?: string;
                schedulerName?: string;
                tasks?: {
                    dependsOn?: {
                        iteration?: string;
                        name?: string[];
                    };
                    /** Format: int32 */
                    maxRetry?: number;
                    /** Format: int32 */
                    minAvailable?: number;
                    name?: string;
                    policies?: {
                        action?: string;
                        /** @enum {string} */
                        event?:
                            | "*"
                            | "PodPending"
                            | "PodRunning"
                            | "PodFailed"
                            | "PodEvicted"
                            | "Unknown"
                            | "TaskCompleted"
                            | "OutOfSync"
                            | "CommandIssued"
                            | "JobUpdated"
                            | "TaskFailed";
                        events?: (
                            | "*"
                            | "PodPending"
                            | "PodRunning"
                            | "PodFailed"
                            | "PodEvicted"
                            | "Unknown"
                            | "TaskCompleted"
                            | "OutOfSync"
                            | "CommandIssued"
                            | "JobUpdated"
                            | "TaskFailed"
                        )[];
                        /** Format: int32 */
                        exitCode?: number;
                        timeout?: string;
                    }[];
                    /** Format: int32 */
                    replicas?: number;
                    template?: {
                        metadata?: {
                            annotations?: {
                                [key: string]: string;
                            };
                            finalizers?: string[];
                            labels?: {
                                [key: string]: string;
                            };
                            name?: string;
                            namespace?: string;
                        };
                        spec?: {
                            /** Format: int64 */
                            activeDeadlineSeconds?: number;
                            affinity?: {
                                nodeAffinity?: {
                                    preferredDuringSchedulingIgnoredDuringExecution?: {
                                        preference: {
                                            matchExpressions?: {
                                                key: string;
                                                operator: string;
                                                values?: string[];
                                            }[];
                                            matchFields?: {
                                                key: string;
                                                operator: string;
                                                values?: string[];
                                            }[];
                                        };
                                        /** Format: int32 */
                                        weight: number;
                                    }[];
                                    requiredDuringSchedulingIgnoredDuringExecution?: {
                                        nodeSelectorTerms: {
                                            matchExpressions?: {
                                                key: string;
                                                operator: string;
                                                values?: string[];
                                            }[];
                                            matchFields?: {
                                                key: string;
                                                operator: string;
                                                values?: string[];
                                            }[];
                                        }[];
                                    };
                                };
                                podAffinity?: {
                                    preferredDuringSchedulingIgnoredDuringExecution?: {
                                        podAffinityTerm: {
                                            labelSelector?: {
                                                matchExpressions?: {
                                                    key: string;
                                                    operator: string;
                                                    values?: string[];
                                                }[];
                                                matchLabels?: {
                                                    [key: string]: string;
                                                };
                                            };
                                            matchLabelKeys?: string[];
                                            mismatchLabelKeys?: string[];
                                            namespaceSelector?: {
                                                matchExpressions?: {
                                                    key: string;
                                                    operator: string;
                                                    values?: string[];
                                                }[];
                                                matchLabels?: {
                                                    [key: string]: string;
                                                };
                                            };
                                            namespaces?: string[];
                                            topologyKey: string;
                                        };
                                        /** Format: int32 */
                                        weight: number;
                                    }[];
                                    requiredDuringSchedulingIgnoredDuringExecution?: {
                                        labelSelector?: {
                                            matchExpressions?: {
                                                key: string;
                                                operator: string;
                                                values?: string[];
                                            }[];
                                            matchLabels?: {
                                                [key: string]: string;
                                            };
                                        };
                                        matchLabelKeys?: string[];
                                        mismatchLabelKeys?: string[];
                                        namespaceSelector?: {
                                            matchExpressions?: {
                                                key: string;
                                                operator: string;
                                                values?: string[];
                                            }[];
                                            matchLabels?: {
                                                [key: string]: string;
                                            };
                                        };
                                        namespaces?: string[];
                                        topologyKey: string;
                                    }[];
                                };
                                podAntiAffinity?: {
                                    preferredDuringSchedulingIgnoredDuringExecution?: {
                                        podAffinityTerm: {
                                            labelSelector?: {
                                                matchExpressions?: {
                                                    key: string;
                                                    operator: string;
                                                    values?: string[];
                                                }[];
                                                matchLabels?: {
                                                    [key: string]: string;
                                                };
                                            };
                                            matchLabelKeys?: string[];
                                            mismatchLabelKeys?: string[];
                                            namespaceSelector?: {
                                                matchExpressions?: {
                                                    key: string;
                                                    operator: string;
                                                    values?: string[];
                                                }[];
                                                matchLabels?: {
                                                    [key: string]: string;
                                                };
                                            };
                                            namespaces?: string[];
                                            topologyKey: string;
                                        };
                                        /** Format: int32 */
                                        weight: number;
                                    }[];
                                    requiredDuringSchedulingIgnoredDuringExecution?: {
                                        labelSelector?: {
                                            matchExpressions?: {
                                                key: string;
                                                operator: string;
                                                values?: string[];
                                            }[];
                                            matchLabels?: {
                                                [key: string]: string;
                                            };
                                        };
                                        matchLabelKeys?: string[];
                                        mismatchLabelKeys?: string[];
                                        namespaceSelector?: {
                                            matchExpressions?: {
                                                key: string;
                                                operator: string;
                                                values?: string[];
                                            }[];
                                            matchLabels?: {
                                                [key: string]: string;
                                            };
                                        };
                                        namespaces?: string[];
                                        topologyKey: string;
                                    }[];
                                };
                            };
                            automountServiceAccountToken?: boolean;
                            containers: {
                                args?: string[];
                                command?: string[];
                                env?: {
                                    name: string;
                                    value?: string;
                                    valueFrom?: {
                                        configMapKeyRef?: {
                                            key: string;
                                            /** @default  */
                                            name: string;
                                            optional?: boolean;
                                        };
                                        fieldRef?: {
                                            apiVersion?: string;
                                            fieldPath: string;
                                        };
                                        resourceFieldRef?: {
                                            containerName?: string;
                                            divisor?: number | string;
                                            resource: string;
                                        };
                                        secretKeyRef?: {
                                            key: string;
                                            /** @default  */
                                            name: string;
                                            optional?: boolean;
                                        };
                                    };
                                }[];
                                envFrom?: {
                                    configMapRef?: {
                                        /** @default  */
                                        name: string;
                                        optional?: boolean;
                                    };
                                    prefix?: string;
                                    secretRef?: {
                                        /** @default  */
                                        name: string;
                                        optional?: boolean;
                                    };
                                }[];
                                image?: string;
                                imagePullPolicy?: string;
                                lifecycle?: {
                                    postStart?: {
                                        exec?: {
                                            command?: string[];
                                        };
                                        httpGet?: {
                                            host?: string;
                                            httpHeaders?: {
                                                name: string;
                                                value: string;
                                            }[];
                                            path?: string;
                                            port: number | string;
                                            scheme?: string;
                                        };
                                        sleep?: {
                                            /** Format: int64 */
                                            seconds: number;
                                        };
                                        tcpSocket?: {
                                            host?: string;
                                            port: number | string;
                                        };
                                    };
                                    preStop?: {
                                        exec?: {
                                            command?: string[];
                                        };
                                        httpGet?: {
                                            host?: string;
                                            httpHeaders?: {
                                                name: string;
                                                value: string;
                                            }[];
                                            path?: string;
                                            port: number | string;
                                            scheme?: string;
                                        };
                                        sleep?: {
                                            /** Format: int64 */
                                            seconds: number;
                                        };
                                        tcpSocket?: {
                                            host?: string;
                                            port: number | string;
                                        };
                                    };
                                };
                                livenessProbe?: {
                                    exec?: {
                                        command?: string[];
                                    };
                                    /** Format: int32 */
                                    failureThreshold?: number;
                                    grpc?: {
                                        /** Format: int32 */
                                        port: number;
                                        /** @default  */
                                        service: string;
                                    };
                                    httpGet?: {
                                        host?: string;
                                        httpHeaders?: {
                                            name: string;
                                            value: string;
                                        }[];
                                        path?: string;
                                        port: number | string;
                                        scheme?: string;
                                    };
                                    /** Format: int32 */
                                    initialDelaySeconds?: number;
                                    /** Format: int32 */
                                    periodSeconds?: number;
                                    /** Format: int32 */
                                    successThreshold?: number;
                                    tcpSocket?: {
                                        host?: string;
                                        port: number | string;
                                    };
                                    /** Format: int64 */
                                    terminationGracePeriodSeconds?: number;
                                    /** Format: int32 */
                                    timeoutSeconds?: number;
                                };
                                name: string;
                                ports?: {
                                    /** Format: int32 */
                                    containerPort: number;
                                    hostIP?: string;
                                    /** Format: int32 */
                                    hostPort?: number;
                                    name?: string;
                                    /** @default TCP */
                                    protocol: string;
                                }[];
                                readinessProbe?: {
                                    exec?: {
                                        command?: string[];
                                    };
                                    /** Format: int32 */
                                    failureThreshold?: number;
                                    grpc?: {
                                        /** Format: int32 */
                                        port: number;
                                        /** @default  */
                                        service: string;
                                    };
                                    httpGet?: {
                                        host?: string;
                                        httpHeaders?: {
                                            name: string;
                                            value: string;
                                        }[];
                                        path?: string;
                                        port: number | string;
                                        scheme?: string;
                                    };
                                    /** Format: int32 */
                                    initialDelaySeconds?: number;
                                    /** Format: int32 */
                                    periodSeconds?: number;
                                    /** Format: int32 */
                                    successThreshold?: number;
                                    tcpSocket?: {
                                        host?: string;
                                        port: number | string;
                                    };
                                    /** Format: int64 */
                                    terminationGracePeriodSeconds?: number;
                                    /** Format: int32 */
                                    timeoutSeconds?: number;
                                };
                                resizePolicy?: {
                                    resourceName: string;
                                    restartPolicy: string;
                                }[];
                                resources?: {
                                    claims?: {
                                        name: string;
                                        request?: string;
                                    }[];
                                    limits?: {
                                        [key: string]: number | string;
                                    };
                                    requests?: {
                                        [key: string]: number | string;
                                    };
                                };
                                restartPolicy?: string;
                                securityContext?: {
                                    allowPrivilegeEscalation?: boolean;
                                    appArmorProfile?: {
                                        localhostProfile?: string;
                                        type: string;
                                    };
                                    capabilities?: {
                                        add?: string[];
                                        drop?: string[];
                                    };
                                    privileged?: boolean;
                                    procMount?: string;
                                    readOnlyRootFilesystem?: boolean;
                                    /** Format: int64 */
                                    runAsGroup?: number;
                                    runAsNonRoot?: boolean;
                                    /** Format: int64 */
                                    runAsUser?: number;
                                    seLinuxOptions?: {
                                        level?: string;
                                        role?: string;
                                        type?: string;
                                        user?: string;
                                    };
                                    seccompProfile?: {
                                        localhostProfile?: string;
                                        type: string;
                                    };
                                    windowsOptions?: {
                                        gmsaCredentialSpec?: string;
                                        gmsaCredentialSpecName?: string;
                                        hostProcess?: boolean;
                                        runAsUserName?: string;
                                    };
                                };
                                startupProbe?: {
                                    exec?: {
                                        command?: string[];
                                    };
                                    /** Format: int32 */
                                    failureThreshold?: number;
                                    grpc?: {
                                        /** Format: int32 */
                                        port: number;
                                        /** @default  */
                                        service: string;
                                    };
                                    httpGet?: {
                                        host?: string;
                                        httpHeaders?: {
                                            name: string;
                                            value: string;
                                        }[];
                                        path?: string;
                                        port: number | string;
                                        scheme?: string;
                                    };
                                    /** Format: int32 */
                                    initialDelaySeconds?: number;
                                    /** Format: int32 */
                                    periodSeconds?: number;
                                    /** Format: int32 */
                                    successThreshold?: number;
                                    tcpSocket?: {
                                        host?: string;
                                        port: number | string;
                                    };
                                    /** Format: int64 */
                                    terminationGracePeriodSeconds?: number;
                                    /** Format: int32 */
                                    timeoutSeconds?: number;
                                };
                                stdin?: boolean;
                                stdinOnce?: boolean;
                                terminationMessagePath?: string;
                                terminationMessagePolicy?: string;
                                tty?: boolean;
                                volumeDevices?: {
                                    devicePath: string;
                                    name: string;
                                }[];
                                volumeMounts?: {
                                    mountPath: string;
                                    mountPropagation?: string;
                                    name: string;
                                    readOnly?: boolean;
                                    recursiveReadOnly?: string;
                                    subPath?: string;
                                    subPathExpr?: string;
                                }[];
                                workingDir?: string;
                            }[];
                            dnsConfig?: {
                                nameservers?: string[];
                                options?: {
                                    name?: string;
                                    value?: string;
                                }[];
                                searches?: string[];
                            };
                            dnsPolicy?: string;
                            enableServiceLinks?: boolean;
                            ephemeralContainers?: {
                                args?: string[];
                                command?: string[];
                                env?: {
                                    name: string;
                                    value?: string;
                                    valueFrom?: {
                                        configMapKeyRef?: {
                                            key: string;
                                            /** @default  */
                                            name: string;
                                            optional?: boolean;
                                        };
                                        fieldRef?: {
                                            apiVersion?: string;
                                            fieldPath: string;
                                        };
                                        resourceFieldRef?: {
                                            containerName?: string;
                                            divisor?: number | string;
                                            resource: string;
                                        };
                                        secretKeyRef?: {
                                            key: string;
                                            /** @default  */
                                            name: string;
                                            optional?: boolean;
                                        };
                                    };
                                }[];
                                envFrom?: {
                                    configMapRef?: {
                                        /** @default  */
                                        name: string;
                                        optional?: boolean;
                                    };
                                    prefix?: string;
                                    secretRef?: {
                                        /** @default  */
                                        name: string;
                                        optional?: boolean;
                                    };
                                }[];
                                image?: string;
                                imagePullPolicy?: string;
                                lifecycle?: {
                                    postStart?: {
                                        exec?: {
                                            command?: string[];
                                        };
                                        httpGet?: {
                                            host?: string;
                                            httpHeaders?: {
                                                name: string;
                                                value: string;
                                            }[];
                                            path?: string;
                                            port: number | string;
                                            scheme?: string;
                                        };
                                        sleep?: {
                                            /** Format: int64 */
                                            seconds: number;
                                        };
                                        tcpSocket?: {
                                            host?: string;
                                            port: number | string;
                                        };
                                    };
                                    preStop?: {
                                        exec?: {
                                            command?: string[];
                                        };
                                        httpGet?: {
                                            host?: string;
                                            httpHeaders?: {
                                                name: string;
                                                value: string;
                                            }[];
                                            path?: string;
                                            port: number | string;
                                            scheme?: string;
                                        };
                                        sleep?: {
                                            /** Format: int64 */
                                            seconds: number;
                                        };
                                        tcpSocket?: {
                                            host?: string;
                                            port: number | string;
                                        };
                                    };
                                };
                                livenessProbe?: {
                                    exec?: {
                                        command?: string[];
                                    };
                                    /** Format: int32 */
                                    failureThreshold?: number;
                                    grpc?: {
                                        /** Format: int32 */
                                        port: number;
                                        /** @default  */
                                        service: string;
                                    };
                                    httpGet?: {
                                        host?: string;
                                        httpHeaders?: {
                                            name: string;
                                            value: string;
                                        }[];
                                        path?: string;
                                        port: number | string;
                                        scheme?: string;
                                    };
                                    /** Format: int32 */
                                    initialDelaySeconds?: number;
                                    /** Format: int32 */
                                    periodSeconds?: number;
                                    /** Format: int32 */
                                    successThreshold?: number;
                                    tcpSocket?: {
                                        host?: string;
                                        port: number | string;
                                    };
                                    /** Format: int64 */
                                    terminationGracePeriodSeconds?: number;
                                    /** Format: int32 */
                                    timeoutSeconds?: number;
                                };
                                name: string;
                                ports?: {
                                    /** Format: int32 */
                                    containerPort: number;
                                    hostIP?: string;
                                    /** Format: int32 */
                                    hostPort?: number;
                                    name?: string;
                                    /** @default TCP */
                                    protocol: string;
                                }[];
                                readinessProbe?: {
                                    exec?: {
                                        command?: string[];
                                    };
                                    /** Format: int32 */
                                    failureThreshold?: number;
                                    grpc?: {
                                        /** Format: int32 */
                                        port: number;
                                        /** @default  */
                                        service: string;
                                    };
                                    httpGet?: {
                                        host?: string;
                                        httpHeaders?: {
                                            name: string;
                                            value: string;
                                        }[];
                                        path?: string;
                                        port: number | string;
                                        scheme?: string;
                                    };
                                    /** Format: int32 */
                                    initialDelaySeconds?: number;
                                    /** Format: int32 */
                                    periodSeconds?: number;
                                    /** Format: int32 */
                                    successThreshold?: number;
                                    tcpSocket?: {
                                        host?: string;
                                        port: number | string;
                                    };
                                    /** Format: int64 */
                                    terminationGracePeriodSeconds?: number;
                                    /** Format: int32 */
                                    timeoutSeconds?: number;
                                };
                                resizePolicy?: {
                                    resourceName: string;
                                    restartPolicy: string;
                                }[];
                                resources?: {
                                    claims?: {
                                        name: string;
                                        request?: string;
                                    }[];
                                    limits?: {
                                        [key: string]: number | string;
                                    };
                                    requests?: {
                                        [key: string]: number | string;
                                    };
                                };
                                restartPolicy?: string;
                                securityContext?: {
                                    allowPrivilegeEscalation?: boolean;
                                    appArmorProfile?: {
                                        localhostProfile?: string;
                                        type: string;
                                    };
                                    capabilities?: {
                                        add?: string[];
                                        drop?: string[];
                                    };
                                    privileged?: boolean;
                                    procMount?: string;
                                    readOnlyRootFilesystem?: boolean;
                                    /** Format: int64 */
                                    runAsGroup?: number;
                                    runAsNonRoot?: boolean;
                                    /** Format: int64 */
                                    runAsUser?: number;
                                    seLinuxOptions?: {
                                        level?: string;
                                        role?: string;
                                        type?: string;
                                        user?: string;
                                    };
                                    seccompProfile?: {
                                        localhostProfile?: string;
                                        type: string;
                                    };
                                    windowsOptions?: {
                                        gmsaCredentialSpec?: string;
                                        gmsaCredentialSpecName?: string;
                                        hostProcess?: boolean;
                                        runAsUserName?: string;
                                    };
                                };
                                startupProbe?: {
                                    exec?: {
                                        command?: string[];
                                    };
                                    /** Format: int32 */
                                    failureThreshold?: number;
                                    grpc?: {
                                        /** Format: int32 */
                                        port: number;
                                        /** @default  */
                                        service: string;
                                    };
                                    httpGet?: {
                                        host?: string;
                                        httpHeaders?: {
                                            name: string;
                                            value: string;
                                        }[];
                                        path?: string;
                                        port: number | string;
                                        scheme?: string;
                                    };
                                    /** Format: int32 */
                                    initialDelaySeconds?: number;
                                    /** Format: int32 */
                                    periodSeconds?: number;
                                    /** Format: int32 */
                                    successThreshold?: number;
                                    tcpSocket?: {
                                        host?: string;
                                        port: number | string;
                                    };
                                    /** Format: int64 */
                                    terminationGracePeriodSeconds?: number;
                                    /** Format: int32 */
                                    timeoutSeconds?: number;
                                };
                                stdin?: boolean;
                                stdinOnce?: boolean;
                                targetContainerName?: string;
                                terminationMessagePath?: string;
                                terminationMessagePolicy?: string;
                                tty?: boolean;
                                volumeDevices?: {
                                    devicePath: string;
                                    name: string;
                                }[];
                                volumeMounts?: {
                                    mountPath: string;
                                    mountPropagation?: string;
                                    name: string;
                                    readOnly?: boolean;
                                    recursiveReadOnly?: string;
                                    subPath?: string;
                                    subPathExpr?: string;
                                }[];
                                workingDir?: string;
                            }[];
                            hostAliases?: {
                                hostnames?: string[];
                                ip: string;
                            }[];
                            hostIPC?: boolean;
                            hostNetwork?: boolean;
                            hostPID?: boolean;
                            hostUsers?: boolean;
                            hostname?: string;
                            imagePullSecrets?: {
                                /** @default  */
                                name: string;
                            }[];
                            initContainers?: {
                                args?: string[];
                                command?: string[];
                                env?: {
                                    name: string;
                                    value?: string;
                                    valueFrom?: {
                                        configMapKeyRef?: {
                                            key: string;
                                            /** @default  */
                                            name: string;
                                            optional?: boolean;
                                        };
                                        fieldRef?: {
                                            apiVersion?: string;
                                            fieldPath: string;
                                        };
                                        resourceFieldRef?: {
                                            containerName?: string;
                                            divisor?: number | string;
                                            resource: string;
                                        };
                                        secretKeyRef?: {
                                            key: string;
                                            /** @default  */
                                            name: string;
                                            optional?: boolean;
                                        };
                                    };
                                }[];
                                envFrom?: {
                                    configMapRef?: {
                                        /** @default  */
                                        name: string;
                                        optional?: boolean;
                                    };
                                    prefix?: string;
                                    secretRef?: {
                                        /** @default  */
                                        name: string;
                                        optional?: boolean;
                                    };
                                }[];
                                image?: string;
                                imagePullPolicy?: string;
                                lifecycle?: {
                                    postStart?: {
                                        exec?: {
                                            command?: string[];
                                        };
                                        httpGet?: {
                                            host?: string;
                                            httpHeaders?: {
                                                name: string;
                                                value: string;
                                            }[];
                                            path?: string;
                                            port: number | string;
                                            scheme?: string;
                                        };
                                        sleep?: {
                                            /** Format: int64 */
                                            seconds: number;
                                        };
                                        tcpSocket?: {
                                            host?: string;
                                            port: number | string;
                                        };
                                    };
                                    preStop?: {
                                        exec?: {
                                            command?: string[];
                                        };
                                        httpGet?: {
                                            host?: string;
                                            httpHeaders?: {
                                                name: string;
                                                value: string;
                                            }[];
                                            path?: string;
                                            port: number | string;
                                            scheme?: string;
                                        };
                                        sleep?: {
                                            /** Format: int64 */
                                            seconds: number;
                                        };
                                        tcpSocket?: {
                                            host?: string;
                                            port: number | string;
                                        };
                                    };
                                };
                                livenessProbe?: {
                                    exec?: {
                                        command?: string[];
                                    };
                                    /** Format: int32 */
                                    failureThreshold?: number;
                                    grpc?: {
                                        /** Format: int32 */
                                        port: number;
                                        /** @default  */
                                        service: string;
                                    };
                                    httpGet?: {
                                        host?: string;
                                        httpHeaders?: {
                                            name: string;
                                            value: string;
                                        }[];
                                        path?: string;
                                        port: number | string;
                                        scheme?: string;
                                    };
                                    /** Format: int32 */
                                    initialDelaySeconds?: number;
                                    /** Format: int32 */
                                    periodSeconds?: number;
                                    /** Format: int32 */
                                    successThreshold?: number;
                                    tcpSocket?: {
                                        host?: string;
                                        port: number | string;
                                    };
                                    /** Format: int64 */
                                    terminationGracePeriodSeconds?: number;
                                    /** Format: int32 */
                                    timeoutSeconds?: number;
                                };
                                name: string;
                                ports?: {
                                    /** Format: int32 */
                                    containerPort: number;
                                    hostIP?: string;
                                    /** Format: int32 */
                                    hostPort?: number;
                                    name?: string;
                                    /** @default TCP */
                                    protocol: string;
                                }[];
                                readinessProbe?: {
                                    exec?: {
                                        command?: string[];
                                    };
                                    /** Format: int32 */
                                    failureThreshold?: number;
                                    grpc?: {
                                        /** Format: int32 */
                                        port: number;
                                        /** @default  */
                                        service: string;
                                    };
                                    httpGet?: {
                                        host?: string;
                                        httpHeaders?: {
                                            name: string;
                                            value: string;
                                        }[];
                                        path?: string;
                                        port: number | string;
                                        scheme?: string;
                                    };
                                    /** Format: int32 */
                                    initialDelaySeconds?: number;
                                    /** Format: int32 */
                                    periodSeconds?: number;
                                    /** Format: int32 */
                                    successThreshold?: number;
                                    tcpSocket?: {
                                        host?: string;
                                        port: number | string;
                                    };
                                    /** Format: int64 */
                                    terminationGracePeriodSeconds?: number;
                                    /** Format: int32 */
                                    timeoutSeconds?: number;
                                };
                                resizePolicy?: {
                                    resourceName: string;
                                    restartPolicy: string;
                                }[];
                                resources?: {
                                    claims?: {
                                        name: string;
                                        request?: string;
                                    }[];
                                    limits?: {
                                        [key: string]: number | string;
                                    };
                                    requests?: {
                                        [key: string]: number | string;
                                    };
                                };
                                restartPolicy?: string;
                                securityContext?: {
                                    allowPrivilegeEscalation?: boolean;
                                    appArmorProfile?: {
                                        localhostProfile?: string;
                                        type: string;
                                    };
                                    capabilities?: {
                                        add?: string[];
                                        drop?: string[];
                                    };
                                    privileged?: boolean;
                                    procMount?: string;
                                    readOnlyRootFilesystem?: boolean;
                                    /** Format: int64 */
                                    runAsGroup?: number;
                                    runAsNonRoot?: boolean;
                                    /** Format: int64 */
                                    runAsUser?: number;
                                    seLinuxOptions?: {
                                        level?: string;
                                        role?: string;
                                        type?: string;
                                        user?: string;
                                    };
                                    seccompProfile?: {
                                        localhostProfile?: string;
                                        type: string;
                                    };
                                    windowsOptions?: {
                                        gmsaCredentialSpec?: string;
                                        gmsaCredentialSpecName?: string;
                                        hostProcess?: boolean;
                                        runAsUserName?: string;
                                    };
                                };
                                startupProbe?: {
                                    exec?: {
                                        command?: string[];
                                    };
                                    /** Format: int32 */
                                    failureThreshold?: number;
                                    grpc?: {
                                        /** Format: int32 */
                                        port: number;
                                        /** @default  */
                                        service: string;
                                    };
                                    httpGet?: {
                                        host?: string;
                                        httpHeaders?: {
                                            name: string;
                                            value: string;
                                        }[];
                                        path?: string;
                                        port: number | string;
                                        scheme?: string;
                                    };
                                    /** Format: int32 */
                                    initialDelaySeconds?: number;
                                    /** Format: int32 */
                                    periodSeconds?: number;
                                    /** Format: int32 */
                                    successThreshold?: number;
                                    tcpSocket?: {
                                        host?: string;
                                        port: number | string;
                                    };
                                    /** Format: int64 */
                                    terminationGracePeriodSeconds?: number;
                                    /** Format: int32 */
                                    timeoutSeconds?: number;
                                };
                                stdin?: boolean;
                                stdinOnce?: boolean;
                                terminationMessagePath?: string;
                                terminationMessagePolicy?: string;
                                tty?: boolean;
                                volumeDevices?: {
                                    devicePath: string;
                                    name: string;
                                }[];
                                volumeMounts?: {
                                    mountPath: string;
                                    mountPropagation?: string;
                                    name: string;
                                    readOnly?: boolean;
                                    recursiveReadOnly?: string;
                                    subPath?: string;
                                    subPathExpr?: string;
                                }[];
                                workingDir?: string;
                            }[];
                            nodeName?: string;
                            nodeSelector?: {
                                [key: string]: string;
                            };
                            os?: {
                                name: string;
                            };
                            overhead?: {
                                [key: string]: number | string;
                            };
                            preemptionPolicy?: string;
                            /** Format: int32 */
                            priority?: number;
                            priorityClassName?: string;
                            readinessGates?: {
                                conditionType: string;
                            }[];
                            resourceClaims?: {
                                name: string;
                                resourceClaimName?: string;
                                resourceClaimTemplateName?: string;
                            }[];
                            restartPolicy?: string;
                            runtimeClassName?: string;
                            schedulerName?: string;
                            schedulingGates?: {
                                name: string;
                            }[];
                            securityContext?: {
                                appArmorProfile?: {
                                    localhostProfile?: string;
                                    type: string;
                                };
                                /** Format: int64 */
                                fsGroup?: number;
                                fsGroupChangePolicy?: string;
                                /** Format: int64 */
                                runAsGroup?: number;
                                runAsNonRoot?: boolean;
                                /** Format: int64 */
                                runAsUser?: number;
                                seLinuxOptions?: {
                                    level?: string;
                                    role?: string;
                                    type?: string;
                                    user?: string;
                                };
                                seccompProfile?: {
                                    localhostProfile?: string;
                                    type: string;
                                };
                                supplementalGroups?: number[];
                                supplementalGroupsPolicy?: string;
                                sysctls?: {
                                    name: string;
                                    value: string;
                                }[];
                                windowsOptions?: {
                                    gmsaCredentialSpec?: string;
                                    gmsaCredentialSpecName?: string;
                                    hostProcess?: boolean;
                                    runAsUserName?: string;
                                };
                            };
                            serviceAccount?: string;
                            serviceAccountName?: string;
                            setHostnameAsFQDN?: boolean;
                            shareProcessNamespace?: boolean;
                            subdomain?: string;
                            /** Format: int64 */
                            terminationGracePeriodSeconds?: number;
                            tolerations?: {
                                effect?: string;
                                key?: string;
                                operator?: string;
                                /** Format: int64 */
                                tolerationSeconds?: number;
                                value?: string;
                            }[];
                            topologySpreadConstraints?: {
                                labelSelector?: {
                                    matchExpressions?: {
                                        key: string;
                                        operator: string;
                                        values?: string[];
                                    }[];
                                    matchLabels?: {
                                        [key: string]: string;
                                    };
                                };
                                matchLabelKeys?: string[];
                                /** Format: int32 */
                                maxSkew: number;
                                /** Format: int32 */
                                minDomains?: number;
                                nodeAffinityPolicy?: string;
                                nodeTaintsPolicy?: string;
                                topologyKey: string;
                                whenUnsatisfiable: string;
                            }[];
                            volumes?: {
                                awsElasticBlockStore?: {
                                    fsType?: string;
                                    /** Format: int32 */
                                    partition?: number;
                                    readOnly?: boolean;
                                    volumeID: string;
                                };
                                azureDisk?: {
                                    cachingMode?: string;
                                    diskName: string;
                                    diskURI: string;
                                    /** @default ext4 */
                                    fsType: string;
                                    kind?: string;
                                    /** @default false */
                                    readOnly: boolean;
                                };
                                azureFile?: {
                                    readOnly?: boolean;
                                    secretName: string;
                                    shareName: string;
                                };
                                cephfs?: {
                                    monitors: string[];
                                    path?: string;
                                    readOnly?: boolean;
                                    secretFile?: string;
                                    secretRef?: {
                                        /** @default  */
                                        name: string;
                                    };
                                    user?: string;
                                };
                                cinder?: {
                                    fsType?: string;
                                    readOnly?: boolean;
                                    secretRef?: {
                                        /** @default  */
                                        name: string;
                                    };
                                    volumeID: string;
                                };
                                configMap?: {
                                    /** Format: int32 */
                                    defaultMode?: number;
                                    items?: {
                                        key: string;
                                        /** Format: int32 */
                                        mode?: number;
                                        path: string;
                                    }[];
                                    /** @default  */
                                    name: string;
                                    optional?: boolean;
                                };
                                csi?: {
                                    driver: string;
                                    fsType?: string;
                                    nodePublishSecretRef?: {
                                        /** @default  */
                                        name: string;
                                    };
                                    readOnly?: boolean;
                                    volumeAttributes?: {
                                        [key: string]: string;
                                    };
                                };
                                downwardAPI?: {
                                    /** Format: int32 */
                                    defaultMode?: number;
                                    items?: {
                                        fieldRef?: {
                                            apiVersion?: string;
                                            fieldPath: string;
                                        };
                                        /** Format: int32 */
                                        mode?: number;
                                        path: string;
                                        resourceFieldRef?: {
                                            containerName?: string;
                                            divisor?: number | string;
                                            resource: string;
                                        };
                                    }[];
                                };
                                emptyDir?: {
                                    medium?: string;
                                    sizeLimit?: number | string;
                                };
                                ephemeral?: {
                                    volumeClaimTemplate?: {
                                        metadata?: {
                                            annotations?: {
                                                [key: string]: string;
                                            };
                                            finalizers?: string[];
                                            labels?: {
                                                [key: string]: string;
                                            };
                                            name?: string;
                                            namespace?: string;
                                        };
                                        spec: {
                                            accessModes?: string[];
                                            dataSource?: {
                                                apiGroup?: string;
                                                kind: string;
                                                name: string;
                                            };
                                            dataSourceRef?: {
                                                apiGroup?: string;
                                                kind: string;
                                                name: string;
                                                namespace?: string;
                                            };
                                            resources?: {
                                                limits?: {
                                                    [key: string]:
                                                        | number
                                                        | string;
                                                };
                                                requests?: {
                                                    [key: string]:
                                                        | number
                                                        | string;
                                                };
                                            };
                                            selector?: {
                                                matchExpressions?: {
                                                    key: string;
                                                    operator: string;
                                                    values?: string[];
                                                }[];
                                                matchLabels?: {
                                                    [key: string]: string;
                                                };
                                            };
                                            storageClassName?: string;
                                            volumeAttributesClassName?: string;
                                            volumeMode?: string;
                                            volumeName?: string;
                                        };
                                    };
                                };
                                fc?: {
                                    fsType?: string;
                                    /** Format: int32 */
                                    lun?: number;
                                    readOnly?: boolean;
                                    targetWWNs?: string[];
                                    wwids?: string[];
                                };
                                flexVolume?: {
                                    driver: string;
                                    fsType?: string;
                                    options?: {
                                        [key: string]: string;
                                    };
                                    readOnly?: boolean;
                                    secretRef?: {
                                        /** @default  */
                                        name: string;
                                    };
                                };
                                flocker?: {
                                    datasetName?: string;
                                    datasetUUID?: string;
                                };
                                gcePersistentDisk?: {
                                    fsType?: string;
                                    /** Format: int32 */
                                    partition?: number;
                                    pdName: string;
                                    readOnly?: boolean;
                                };
                                gitRepo?: {
                                    directory?: string;
                                    repository: string;
                                    revision?: string;
                                };
                                glusterfs?: {
                                    endpoints: string;
                                    path: string;
                                    readOnly?: boolean;
                                };
                                hostPath?: {
                                    path: string;
                                    type?: string;
                                };
                                image?: {
                                    pullPolicy?: string;
                                    reference?: string;
                                };
                                iscsi?: {
                                    chapAuthDiscovery?: boolean;
                                    chapAuthSession?: boolean;
                                    fsType?: string;
                                    initiatorName?: string;
                                    iqn: string;
                                    /** @default default */
                                    iscsiInterface: string;
                                    /** Format: int32 */
                                    lun: number;
                                    portals?: string[];
                                    readOnly?: boolean;
                                    secretRef?: {
                                        /** @default  */
                                        name: string;
                                    };
                                    targetPortal: string;
                                };
                                name: string;
                                nfs?: {
                                    path: string;
                                    readOnly?: boolean;
                                    server: string;
                                };
                                persistentVolumeClaim?: {
                                    claimName: string;
                                    readOnly?: boolean;
                                };
                                photonPersistentDisk?: {
                                    fsType?: string;
                                    pdID: string;
                                };
                                portworxVolume?: {
                                    fsType?: string;
                                    readOnly?: boolean;
                                    volumeID: string;
                                };
                                projected?: {
                                    /** Format: int32 */
                                    defaultMode?: number;
                                    sources?: {
                                        clusterTrustBundle?: {
                                            labelSelector?: {
                                                matchExpressions?: {
                                                    key: string;
                                                    operator: string;
                                                    values?: string[];
                                                }[];
                                                matchLabels?: {
                                                    [key: string]: string;
                                                };
                                            };
                                            name?: string;
                                            optional?: boolean;
                                            path: string;
                                            signerName?: string;
                                        };
                                        configMap?: {
                                            items?: {
                                                key: string;
                                                /** Format: int32 */
                                                mode?: number;
                                                path: string;
                                            }[];
                                            /** @default  */
                                            name: string;
                                            optional?: boolean;
                                        };
                                        downwardAPI?: {
                                            items?: {
                                                fieldRef?: {
                                                    apiVersion?: string;
                                                    fieldPath: string;
                                                };
                                                /** Format: int32 */
                                                mode?: number;
                                                path: string;
                                                resourceFieldRef?: {
                                                    containerName?: string;
                                                    divisor?: number | string;
                                                    resource: string;
                                                };
                                            }[];
                                        };
                                        secret?: {
                                            items?: {
                                                key: string;
                                                /** Format: int32 */
                                                mode?: number;
                                                path: string;
                                            }[];
                                            /** @default  */
                                            name: string;
                                            optional?: boolean;
                                        };
                                        serviceAccountToken?: {
                                            audience?: string;
                                            /** Format: int64 */
                                            expirationSeconds?: number;
                                            path: string;
                                        };
                                    }[];
                                };
                                quobyte?: {
                                    group?: string;
                                    readOnly?: boolean;
                                    registry: string;
                                    tenant?: string;
                                    user?: string;
                                    volume: string;
                                };
                                rbd?: {
                                    fsType?: string;
                                    image: string;
                                    /** @default /etc/ceph/keyring */
                                    keyring: string;
                                    monitors: string[];
                                    /** @default rbd */
                                    pool: string;
                                    readOnly?: boolean;
                                    secretRef?: {
                                        /** @default  */
                                        name: string;
                                    };
                                    /** @default admin */
                                    user: string;
                                };
                                scaleIO?: {
                                    /** @default xfs */
                                    fsType: string;
                                    gateway: string;
                                    protectionDomain?: string;
                                    readOnly?: boolean;
                                    secretRef: {
                                        /** @default  */
                                        name: string;
                                    };
                                    sslEnabled?: boolean;
                                    /** @default ThinProvisioned */
                                    storageMode: string;
                                    storagePool?: string;
                                    system: string;
                                    volumeName?: string;
                                };
                                secret?: {
                                    /** Format: int32 */
                                    defaultMode?: number;
                                    items?: {
                                        key: string;
                                        /** Format: int32 */
                                        mode?: number;
                                        path: string;
                                    }[];
                                    optional?: boolean;
                                    secretName?: string;
                                };
                                storageos?: {
                                    fsType?: string;
                                    readOnly?: boolean;
                                    secretRef?: {
                                        /** @default  */
                                        name: string;
                                    };
                                    volumeName?: string;
                                    volumeNamespace?: string;
                                };
                                vsphereVolume?: {
                                    fsType?: string;
                                    storagePolicyID?: string;
                                    storagePolicyName?: string;
                                    volumePath: string;
                                };
                            }[];
                        };
                    };
                    /** @enum {string} */
                    topologyPolicy?:
                        | "none"
                        | "best-effort"
                        | "restricted"
                        | "single-numa-node";
                }[];
                /** Format: int32 */
                ttlSecondsAfterFinished?: number;
                volumes?: {
                    mountPath: string;
                    volumeClaim?: {
                        accessModes?: string[];
                        dataSource?: {
                            apiGroup?: string;
                            kind: string;
                            name: string;
                        };
                        dataSourceRef?: {
                            apiGroup?: string;
                            kind: string;
                            name: string;
                            namespace?: string;
                        };
                        resources?: {
                            limits?: {
                                [key: string]: number | string;
                            };
                            requests?: {
                                [key: string]: number | string;
                            };
                        };
                        selector?: {
                            matchExpressions?: {
                                key: string;
                                operator: string;
                                values?: string[];
                            }[];
                            matchLabels?: {
                                [key: string]: string;
                            };
                        };
                        storageClassName?: string;
                        volumeAttributesClassName?: string;
                        volumeMode?: string;
                        volumeName?: string;
                    };
                    volumeClaimName?: string;
                }[];
            };
            status?: {
                conditions?: {
                    /** Format: date-time */
                    lastTransitionTime?: string;
                    status: string;
                }[];
                controlledResources?: {
                    [key: string]: string;
                };
                /** Format: int32 */
                failed?: number;
                /** Format: int32 */
                minAvailable?: number;
                /** Format: int32 */
                pending?: number;
                /** Format: int32 */
                retryCount?: number;
                /** Format: int32 */
                running?: number;
                runningDuration?: string;
                state?: {
                    /** Format: date-time */
                    lastTransitionTime?: string;
                    message?: string;
                    phase?: string;
                    reason?: string;
                };
                /** Format: int32 */
                succeeded?: number;
                taskStatusCount?: {
                    [key: string]: {
                        phase?: {
                            [key: string]: number;
                        };
                    };
                };
                /** Format: int32 */
                terminating?: number;
                /** Format: int32 */
                unknown?: number;
                /** Format: int32 */
                version?: number;
            };
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
