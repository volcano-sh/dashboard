name: Close Issues

on:
    pull_request:
        types: [closed]
        branches: [main]
    workflow_dispatch:
        inputs:
            issue_numbers:
                description: 'Comma-separated list of issue numbers to close (e.g., 123,456,789)'
                required: true
                type: string
            reason:
                description: 'Reason for closing'
                required: false
                default: 'Fixed in recent PR'
                type: string

jobs:
    close-issues-auto:
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
        runs-on: ubuntu-latest
        steps:
            - name: Close linked issues
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const prBody = context.payload.pull_request.body || '';
                      const prTitle = context.payload.pull_request.title || '';
                      
                      // Extract issue numbers from PR body and title
                      // Matches patterns like: fixes #123, closes #456, resolves #789
                      const issueRegex = /(?:close[sd]?|fix(?:e[sd])?|resolve[sd]?)\s*:?\s*#(\d+)/gi;
                      const issueNumbers = [];
                      
                      let match;
                      while ((match = issueRegex.exec(prBody + ' ' + prTitle)) !== null) {
                          issueNumbers.push(parseInt(match[1]));
                      }
                      
                      // Remove duplicates
                      const uniqueIssues = [...new Set(issueNumbers)];
                      
                      for (const issueNumber of uniqueIssues) {
                          try {
                              // Check if issue exists and is open
                              const { data: issue } = await github.rest.issues.get({
                                  owner: context.repo.owner,
                                  repo: context.repo.repo,
                                  issue_number: issueNumber
                              });
                              
                              if (issue.state === 'open') {
                                  // Close the issue
                                  await github.rest.issues.update({
                                      owner: context.repo.owner,
                                      repo: context.repo.repo,
                                      issue_number: issueNumber,
                                      state: 'closed'
                                  });
                                  
                                  // Add a comment explaining the closure
                                  await github.rest.issues.createComment({
                                      owner: context.repo.owner,
                                      repo: context.repo.repo,
                                      issue_number: issueNumber,
                                      body: `Automatically closed by PR #${context.payload.pull_request.number}`
                                  });
                                  
                                  console.log(`Closed issue #${issueNumber}`);
                              }
                          } catch (error) {
                              console.log(`Could not process issue #${issueNumber}: ${error.message}`);
                          }
                      }
    close-issues-manual:
        if: github.event_name == 'workflow_dispatch'
        runs-on: ubuntu-latest
        steps:
            - name: Close specified issues
              uses: actions/github-script@v7
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const issueNumbers = '${{ github.event.inputs.issue_numbers }}'
                          .split(',')
                          .map(num => parseInt(num.trim()))
                          .filter(num => !isNaN(num));
                      
                      const reason = '${{ github.event.inputs.reason }}';
                      
                      for (const issueNumber of issueNumbers) {
                          try {
                              // Check if issue exists and is open
                              const { data: issue } = await github.rest.issues.get({
                                  owner: context.repo.owner,
                                  repo: context.repo.repo,
                                  issue_number: issueNumber
                              });
                              
                              if (issue.state === 'open') {
                                  // Close the issue
                                  await github.rest.issues.update({
                                      owner: context.repo.owner,
                                      repo: context.repo.repo,
                                      issue_number: issueNumber,
                                      state: 'closed'
                                  });
                                  
                                  // Add a comment explaining the closure
                                  await github.rest.issues.createComment({
                                      owner: context.repo.owner,
                                      repo: context.repo.repo,
                                      issue_number: issueNumber,
                                      body: `Issue closed: ${reason}`
                                  });
                                  
                                  console.log(`Closed issue #${issueNumber}`);
                              } else {
                                  console.log(`Issue #${issueNumber} is already closed`);
                              }
                          } catch (error) {
                              console.log(`Could not process issue #${issueNumber}: ${error.message}`);
                          }
                      }
                      